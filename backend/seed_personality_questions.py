#!/usr/bin/env python3
"""
Seed script for personality questions
Populates the personality_questions table with career-focused questions
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import sessionmaker
from app.core.database import engine
from app.models.personality_test import PersonalityQuestion

# Create session
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Career-focused personality questions from frontend
CAREER_PERSONALITY_QUESTIONS = [
    {
        "question_id": "Q1",
        "text": "Karma≈üƒ±k bir durumu anlamak i√ßin √∂nce verileri toplar ve analiz ederim.",
        "category": "personality",
        "trait": "Data Science",
        "order": 1
    },
    {
        "question_id": "Q2", 
        "text": "Bir projenin ba≈üarƒ±lƒ± olmasƒ± i√ßin ekip i√ßi ileti≈üimin her ≈üeyden √∂nemli olduƒüuna inanƒ±rƒ±m.",
        "category": "personality",
        "trait": "Project Management",
        "order": 2
    },
    {
        "question_id": "Q3",
        "text": "Bir ≈üey tasarlarken insanlarƒ±n ne hissedeceƒüini sƒ±k sƒ±k d√º≈ü√ºn√ºr√ºm.",
        "category": "personality", 
        "trait": "UI/UX",
        "order": 3
    },
    {
        "question_id": "Q4",
        "text": "Detaylƒ± planlar yapmayƒ± ve her adƒ±mƒ± kontrol etmeyi severim.",
        "category": "personality",
        "trait": "Project Management", 
        "order": 4
    },
    {
        "question_id": "Q5",
        "text": "G√∂r√ºnmeyen ama sistemin sorunsuz i≈ülemesini saƒülayan ≈üeyleri in≈üa etmek beni tatmin eder.",
        "category": "personality",
        "trait": "Backend",
        "order": 5
    },
    {
        "question_id": "Q6",
        "text": "Bir sorunu √ß√∂zmeden √∂nce onu t√ºm y√∂nleriyle anlamaya √ßalƒ±≈üƒ±rƒ±m.",
        "category": "personality",
        "trait": "Data Science",
        "order": 6
    },
    {
        "question_id": "Q7", 
        "text": "Yaratƒ±cƒ±lƒ±ƒüƒ±mƒ± kullanabileceƒüim i≈üler beni daha √ßok motive eder.",
        "category": "personality",
        "trait": "UI/UX",
        "order": 7
    },
    {
        "question_id": "Q8",
        "text": "Verilere bakmadan karar vermek bana g√ºvensiz gelir.",
        "category": "personality",
        "trait": "Data Science",
        "order": 8
    },
    {
        "question_id": "Q9",
        "text": "ƒ∞nsanlar arasƒ±nda denge kurmak ve herkesi aynƒ± hedefe y√∂nlendirmek bana doƒüal gelir.",
        "category": "personality",
        "trait": "Project Management",
        "order": 9
    },
    {
        "question_id": "Q10",
        "text": "Bir sistemin arkasƒ±ndaki yapƒ±yƒ± anlamak beni heyecanlandƒ±rƒ±r.",
        "category": "personality",
        "trait": "Backend",
        "order": 10
    },
    {
        "question_id": "Q11",
        "text": "Bir √ºr√ºn ya da fikir ba≈ükalarƒ±nƒ±n hayatƒ±nƒ± kolayla≈ütƒ±rƒ±yorsa daha anlamlƒ± hale gelir.",
        "category": "personality",
        "trait": "UI/UX",
        "order": 11
    },
    {
        "question_id": "Q12",
        "text": "ƒ∞yi bir ekip √ßalƒ±≈ümasƒ±nƒ±n temelinde planlama ve zamanlama vardƒ±r.",
        "category": "personality",
        "trait": "Project Management",
        "order": 12
    },
    {
        "question_id": "Q13",
        "text": "Kendi ba≈üƒ±ma uzun s√ºre odaklanarak bir ≈üey geli≈ütirmek beni yormaz, aksine enerjimi artƒ±rƒ±r.",
        "category": "personality",
        "trait": "Backend",
        "order": 13
    },
    {
        "question_id": "Q14",
        "text": "Duygular deƒüil; veriler, mantƒ±k ve sistemler bana daha anlamlƒ± gelir.",
        "category": "personality",
        "trait": "Data Science",
        "order": 14
    },
    {
        "question_id": "Q15",
        "text": "ƒ∞nsanlarƒ±n bir ≈üeyi kullanƒ±rken ne deneyimlediƒüini g√∂zlemlemekten keyif alƒ±rƒ±m.",
        "category": "personality",
        "trait": "UI/UX",
        "order": 15
    }
]

def seed_personality_questions():
    """Seed personality questions into database"""
    db = SessionLocal()
    
    try:
        # Check if questions already exist
        existing_count = db.query(PersonalityQuestion).count()
        if existing_count > 0:
            print(f"‚ö†Ô∏è  {existing_count} personality questions already exist. Skipping seed.")
            return
        
        # Add all questions
        questions_added = 0
        for question_data in CAREER_PERSONALITY_QUESTIONS:
            question = PersonalityQuestion(
                question_id=question_data["question_id"],
                text=question_data["text"],
                category=question_data["category"],
                trait=question_data["trait"],
                order=question_data["order"],
                is_reverse_scored=False
            )
            
            db.add(question)
            questions_added += 1
        
        # Commit all changes
        db.commit()
        print(f"‚úÖ Successfully seeded {questions_added} personality questions!")
        
        # Verify the data
        total_questions = db.query(PersonalityQuestion).count()
        print(f"üìä Total personality questions in database: {total_questions}")
        
    except Exception as e:
        print(f"‚ùå Error seeding personality questions: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("üå± Seeding personality questions...")
    seed_personality_questions()
    print("üéâ Personality questions seeding completed!")
